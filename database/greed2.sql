-- MySQL Script generated by MySQL Workbench
-- 12/07/14 12:46:00
-- Model: database    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema greed
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema greed
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `greed` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `greed` ;

-- -----------------------------------------------------
-- Table `greed`.`account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`account` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `name_UNIQUE` (`username` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greed`.`stock`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`stock` (
  `symbol` VARCHAR(45) NOT NULL,
  `company` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`symbol`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greed`.`competition`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`competition` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `owner_account_id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `entryfee` DECIMAL(13,2) UNSIGNED NOT NULL,
  `unixtime_start` INT UNSIGNED NOT NULL,
  `unixtime_length` INT UNSIGNED NOT NULL,
  `cancelled` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  INDEX `fk_competition_account1_idx` (`owner_account_id` ASC),
  CONSTRAINT `fk_competition_account1`
    FOREIGN KEY (`owner_account_id`)
    REFERENCES `greed`.`account` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greed`.`super_portfolio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`super_portfolio` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `account_id` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `initial_cash` DECIMAL(13,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_super_portfolio_account1_idx` (`account_id` ASC),
  UNIQUE INDEX `account_name_UNIQUE` (`account_id` ASC, `name` ASC),
  CONSTRAINT `fk_super_portfolio_account1`
    FOREIGN KEY (`account_id`)
    REFERENCES `greed`.`account` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greed`.`sub_portfolio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`sub_portfolio` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `super_portfolio_id` INT NOT NULL,
  `competition_id` INT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_portfolio_competition1_idx` (`competition_id` ASC),
  INDEX `fk_portfolio_super_portfolio1_idx` (`super_portfolio_id` ASC),
  UNIQUE INDEX `super_portfolio_id_competiton_id_UNIQUE` (`super_portfolio_id` ASC, `competition_id` ASC),
  CONSTRAINT `fk_portfolio_competition1`
    FOREIGN KEY (`competition_id`)
    REFERENCES `greed`.`competition` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_portfolio_super_portfolio1`
    FOREIGN KEY (`super_portfolio_id`)
    REFERENCES `greed`.`super_portfolio` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greed`.`transaction`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`transaction` (
  `sub_portfolio_id` INT NOT NULL,
  `unixtime` INT UNSIGNED NOT NULL,
  `stock_symbol` VARCHAR(45) NOT NULL,
  `stock_count` INT UNSIGNED NOT NULL,
  `stock_value` DECIMAL(13,2) UNSIGNED NOT NULL,
  `type` ENUM('p','s') NOT NULL,
  INDEX `fk_transation_stock1_idx` (`stock_symbol` ASC),
  PRIMARY KEY (`sub_portfolio_id`, `unixtime`, `stock_symbol`),
  INDEX `fk_transaction_sub_portfolio1_idx` (`sub_portfolio_id` ASC),
  CONSTRAINT `fk_transation_stock1`
    FOREIGN KEY (`stock_symbol`)
    REFERENCES `greed`.`stock` (`symbol`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_transaction_sub_portfolio1`
    FOREIGN KEY (`sub_portfolio_id`)
    REFERENCES `greed`.`sub_portfolio` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `greed`.`stock_current`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`stock_current` (
  `stock_symbol` VARCHAR(45) NOT NULL,
  `value` DECIMAL(13,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`stock_symbol`),
  CONSTRAINT `fk_stock_current_stock1`
    FOREIGN KEY (`stock_symbol`)
    REFERENCES `greed`.`stock` (`symbol`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `greed` ;

-- -----------------------------------------------------
-- Placeholder table for view `greed`.`competition_ext`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`competition_ext` (`id` INT, `owner_account_id` INT, `name` INT, `entryfee` INT, `unixtime_start` INT, `unixtime_length` INT, `cancelled` INT, `unixtime_end` INT);

-- -----------------------------------------------------
-- Placeholder table for view `greed`.`transaction_ext`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`transaction_ext` (`sub_portfolio_id` INT, `unixtime` INT, `stock_symbol` INT, `stock_count` INT, `stock_value` INT, `type` INT, `stock_delta` INT, `cash_delta` INT);

-- -----------------------------------------------------
-- Placeholder table for view `greed`.`sub_portfolio_initial`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`sub_portfolio_initial` (`id` INT, `cash` INT);

-- -----------------------------------------------------
-- Placeholder table for view `greed`.`sub_portfolio_delta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`sub_portfolio_delta` (`id` INT, `unixtime` INT, `cash_delta` INT, `stock_symbol` INT, `stock_delta` INT, `competition_id` INT);

-- -----------------------------------------------------
-- Placeholder table for view `greed`.`sub_portfolio_stocks`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`sub_portfolio_stocks` (`id` INT, `stock_symbol` INT);

-- -----------------------------------------------------
-- Placeholder table for view `greed`.`sub_portfolio_ext`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`sub_portfolio_ext` (`id` INT, `super_portfolio_id` INT, `competition_id` INT, `account_id` INT, `super_portfolio_name` INT, `competition_name` INT, `account_username` INT);

-- -----------------------------------------------------
-- Placeholder table for view `greed`.`stock_ext`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `greed`.`stock_ext` (`symbol` INT, `company` INT, `current_value` INT);

-- -----------------------------------------------------
-- function portfolio_cash_value
-- -----------------------------------------------------

DELIMITER $$
USE `greed`$$
CREATE FUNCTION portfolio_cash_value (p_id INT, p_unixtime INT UNSIGNED) RETURNS DECIMAL(13,2)
BEGIN
	RETURN (
		SELECT
			sub_portfolio_initial.cash - SUM(sub_portfolio_delta.cash_delta) AS value
		FROM
			sub_portfolio_delta
		JOIN
			sub_portfolio_initial
				ON sub_portfolio_delta.id = sub_portfolio_initial.id
		WHERE
			sub_portfolio_delta.id = p_id
			AND sub_portfolio_delta.unixtime <= p_unixtime
		GROUP BY sub_portfolio_delta.id
	);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function portfolio_stock_count
-- -----------------------------------------------------

DELIMITER $$
USE `greed`$$
CREATE FUNCTION portfolio_stock_count (p_id INT, p_unixtime INT UNSIGNED, p_stock_symbol VARCHAR(45)) RETURNS INT UNSIGNED
BEGIN
	RETURN (
		SELECT
			SUM(sub_portfolio_delta.stock_delta) AS count
		FROM
			sub_portfolio_delta
		WHERE
			sub_portfolio_delta.id = p_id
			AND sub_portfolio_delta.unixtime <= p_unixtime
			AND sub_portfolio_delta.stock_symbol = p_stock_symbol
	);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function portfolio_competition_reserved_value
-- -----------------------------------------------------

DELIMITER $$
USE `greed`$$
CREATE FUNCTION portfolio_competition_reserved_value (p_id INT, p_unixtime INT UNSIGNED, p_future BOOL) RETURNS DECIMAL(13,2)
BEGIN
	RETURN (
		SELECT
			SUM(sub_portfolio_delta.cash_delta) AS reserved
		FROM
			sub_portfolio_delta
		WHERE
			sub_portfolio_delta.id = p_id
			AND sub_portfolio_delta.unixtime >= p_unixtime
			AND NOT ISNULL(sub_portfolio_delta.competition_id)
			AND CASE WHEN p_future
					THEN sub_portfolio_delta.cash_delta > 0
					ELSE true
				END
	)
	;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `greed`.`competition_ext`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `greed`.`competition_ext`;
USE `greed`;
CREATE  OR REPLACE VIEW competition_ext AS
    SELECT 
        competition.*,
        competition.unixtime_start + competition.unixtime_length AS unixtime_end
    FROM
        competition;

-- -----------------------------------------------------
-- View `greed`.`transaction_ext`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `greed`.`transaction_ext`;
USE `greed`;
CREATE  OR REPLACE VIEW transaction_ext AS
    SELECT 
        transaction.*,
        CAST(transaction.stock_count AS SIGNED) * IF(transaction.type = 's', - 1, 1) AS stock_delta,
        CAST(transaction.stock_count AS SIGNED) * transaction.stock_value * IF(transaction.type = 's', 1, - 1) AS cash_delta
    FROM
        transaction;

-- -----------------------------------------------------
-- View `greed`.`sub_portfolio_initial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `greed`.`sub_portfolio_initial`;
USE `greed`;
CREATE  OR REPLACE VIEW sub_portfolio_initial AS
    SELECT 
        sub_portfolio.id AS id,
        IF(ISNULL(competition_id),
            super_portfolio.initial_cash,
            competition.entryfee) AS cash
    FROM
        sub_portfolio
            JOIN
        super_portfolio ON super_portfolio_id = super_portfolio.id
            LEFT OUTER JOIN
        competition ON competition_id = competition.id
    GROUP BY sub_portfolio.id;

-- -----------------------------------------------------
-- View `greed`.`sub_portfolio_delta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `greed`.`sub_portfolio_delta`;
USE `greed`;
CREATE  OR REPLACE VIEW sub_portfolio_delta AS
    SELECT 
        sub_portfolio.id AS id,
        0 AS unixtime,
        0 AS cash_delta,
        NULL AS stock_symbol,
        NULL AS stock_delta,
        NULL AS competition_id
    FROM
        sub_portfolio 
    UNION SELECT 
        sub_portfolio.id AS id,
        transaction_ext.unixtime AS unixtime,
        transaction_ext.cash_delta AS cash_delta,
        transaction_ext.stock_symbol AS stock_symbol,
        transaction_ext.stock_delta AS stock_delta,
        NULL AS competition_id
    FROM
        sub_portfolio
            JOIN
        transaction_ext ON sub_portfolio.id = transaction_ext.sub_portfolio_id 
    UNION SELECT 
        sub_portfolio.id AS id,
        competition_ext.unixtime_start AS unixtime,
        competition_ext.entryfee * - 1 AS cash_delta,
        NULL AS stock_symbol,
        NULL AS stock_delta,
        competition_ext.id AS competition_id
    FROM
        sub_portfolio
            JOIN
        sub_portfolio comp_sub_portfolio ON sub_portfolio.id != comp_sub_portfolio.id
            AND sub_portfolio.super_portfolio_id = comp_sub_portfolio.super_portfolio_id
            AND sub_portfolio.competition_id IS NULL
            JOIN
        competition_ext ON comp_sub_portfolio.competition_id = competition_ext.id 
    UNION SELECT 
        sub_portfolio.id AS id,
        competition_ext.unixtime_end AS unixtime,
        competition_ext.entryfee AS cash_delta,
        NULL AS stock_symbol,
        NULL AS stock_delta,
        competition_ext.id AS competition_id
    FROM
        sub_portfolio
            JOIN
        sub_portfolio comp_sub_portfolio ON sub_portfolio.id != comp_sub_portfolio.id
            AND sub_portfolio.super_portfolio_id = comp_sub_portfolio.super_portfolio_id
            AND sub_portfolio.competition_id IS NULL
            JOIN
        competition_ext ON comp_sub_portfolio.competition_id = competition_ext.id;

-- -----------------------------------------------------
-- View `greed`.`sub_portfolio_stocks`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `greed`.`sub_portfolio_stocks`;
USE `greed`;
CREATE  OR REPLACE VIEW sub_portfolio_stocks AS
    SELECT 
        sub_portfolio.id AS id,
        transaction.stock_symbol AS stock_symbol
    FROM
        sub_portfolio
            JOIN
        transaction ON sub_portfolio.id = transaction.sub_portfolio_id
    GROUP BY sub_portfolio.id , transaction.stock_symbol
;

-- -----------------------------------------------------
-- View `greed`.`sub_portfolio_ext`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `greed`.`sub_portfolio_ext`;
USE `greed`;
CREATE  OR REPLACE VIEW sub_portfolio_ext AS
    SELECT 
        sub_portfolio.*,
        account.id AS account_id,
        super_portfolio.name AS super_portfolio_name,
        competition.name AS competition_name,
        account.username AS account_username
    FROM
        sub_portfolio
            JOIN
        super_portfolio ON sub_portfolio.super_portfolio_id = super_portfolio.id
            JOIN
        account ON super_portfolio.account_id = account.id
            LEFT JOIN
        competition ON sub_portfolio.competition_id = competition.id;

-- -----------------------------------------------------
-- View `greed`.`stock_ext`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `greed`.`stock_ext`;
USE `greed`;
CREATE  OR REPLACE VIEW stock_ext AS
    SELECT 
        stock.*, stock_current.value AS current_value
    FROM
        stock
            JOIN
        stock_current ON stock.symbol = stock_current.stock_symbol
;
USE `greed`;

DELIMITER $$
USE `greed`$$
CREATE TRIGGER greed.super_portfolio_AFTER_INSERT AFTER INSERT ON super_portfolio FOR EACH ROW
BEGIN
	INSERT INTO sub_portfolio (super_portfolio_id) VALUES (NEW.id);
END;$$

USE `greed`$$
CREATE TRIGGER greed.sub_portfolio_BEFORE_INSERT BEFORE INSERT ON sub_portfolio FOR EACH ROW
BEGIN
	IF (NEW.competition_id IS NULL) THEN
		IF (EXISTS(SELECT super_portfolio_id FROM sub_portfolio WHERE super_portfolio_id = NEW.super_portfolio_id AND competition_id IS NULL)) THEN
			SIGNAL SQLSTATE '23000'
            SET MESSAGE_TEXT = 'Duplicate entry',
            MYSQL_ERRNO = 1062;
        END IF;
	END IF;
END;$$

USE `greed`$$
CREATE TRIGGER greed.sub_portfolio_BEFORE_UPDATE BEFORE UPDATE ON sub_portfolio FOR EACH ROW
BEGIN
	IF (NEW.competition_id IS NULL) THEN
		IF (EXISTS(SELECT super_portfolio_id FROM sub_portfolio WHERE super_portfolio_id = NEW.super_portfolio_id AND competition_id IS NULL)) THEN
			SIGNAL SQLSTATE '23000'
            SET MESSAGE_TEXT = 'Duplicate entry',
            MYSQL_ERRNO = 1062;
        END IF;
	END IF;
END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
